#!/bin/bash
#
#	install_commands
#	This bash script installs and sets up various services.
#	in development, one should probably use this as a reference but not run it.
#
PROJECT_ENV='production'
source ~/.bashrc
source ~/.profile
source ~/shared.sh

if [ -z "$PROJECT_ENV" ]; then
	echo 'This script requires $PROJECT_ENV to be set'
	exit 1
fi
echo "You are running in the $PROJECT_ENV enviroment___________________________________"
X="$HOME/$PROJECT_ENV.sh"
source $X

if ! grep -q 'source ~/shared.sh' ~/.bashrc; then
 		echo "Y"
		echo "source ~/shared.sh" >> ~/.bashrc
		echo "source ~/shared.sh" >> ~/.profile
        echo "source ~/$PROJECT_ENV.sh" >> ~/.bashrc
        echo "source ~/$PROJECT_ENV".sh >> ~/.profile
fi
if [ -z "$ERLANG_VERSION" ]; then
	echo 'missing enviroment variables'
	exit 1
fi

sudo apt update
sudo apt upgrade

# if [ -z $(whereis bun) ]; then
# 	echo "INSTALLING BUN"
# 	sudo apt install curl -y
# 	curl -fsSL https://bun.sh/install | bash
# fi

echo "INSTALLING ESSENTIALS"
sudo apt install rustc gcc cmake build-essential pkg-config git libffi-dev unzip libssl-dev erlang-dev erlang-crypto -y 

# echo "INSTALLING SURREALDB"
# #https://surrealdb.com/install
# curl -sSf https://install.surrealdb.com | sh

echo "INSTALLING ELIXIR AND ERLANG"

#dont trust apt to be up to date with elixir version so we use asdf. See install instructions
#	here:		https://asdf-vm.com/guide/getting-started.html
#	and here:	https://thinkingelixir.com/install-elixir-using-asdf/

echo "ASDF setup"
if [ ! -f ~/.asdf/asdf.sh ]; then
	git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0
	echo '. ~/.asdf/asdf.sh' >> ~/.bashrc
	echo '. ~/.asdf/completions/asdf.bash' >> ~/.bashrc
	echo '. ~/.asdf/asdf.sh' >> ~/.profile
	echo '. ~/.asdf/completions/asdf.bash' >> ~/.profile
	bash ~/.asdf/asdf.sh
	bash ~/.asdf/completions/asdf.bash

	#add erlang as installable
	asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git
	asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git
	echo "ASDF installed"
else
	export PATH="$PATH:/home/luke/.asdf/shims"
	#these fucking things only run interactively which is the dumbest shit I have ever seen.
	bash ~/.asdf/asdf.sh
	bash ~/.asdf/completions/asdf.bash
	echo "ASDF pre-installed"
fi

#check to make sure the versions are there
if [ -z "$ERLANG_VERSION" ]; then
	echo "\$ERLANG_VERSION is missing. Pick the latest stable version with 'asdf list-all erlang'. Add into the private/production file"
	exit 1
fi

if [ -z "$ELIXIR_VERSION" ]; then
	echo "\$ELIXIR_VERSION is missing. Pick latest stable version with 'asdf list-all elixir'. The 'opt' number HAS TO match the major version number of the $ERLANG_VERSION. Add into the private/production file"
	exit 1
fi

echo "setting up elixir/erlang via asdf"
asdf install erlang $ERLANG_VERSION
asdf install elixir $ELIXIR_VERSION
echo "setting global versions"
asdf global erlang $ERLANG_VERSION
asdf global elixir $ELIXIR_VERSION
echo "updating the asdf things"
asdf update
asdf plugin update erlang
asdf plugin update elixir
echo "end elixir/erlang setup"

echo "adding services to systemctl"
sudo cp ~/vm_utils/*.service /etc/systemd/system

echo "cloning and or updating project $PROJECT_DIR"
if [ -z "$PROJECT_DIR" ]; then
	echo '$PROJECT_DIR is missing. This should be the name of the project (aka base directory). This should also be the name of your git repo.'
	exit 1
fi
if [ -z "$GITHUB_CLONE_URL" ]; then
	echo '$GITHUB_CLONE_URL is missing. Should look like https://[github username]:[github personal access token]@github.com/[repo path]'
	exit 1
fi

if [[ -d "~/$PROJECT_DIR" ]]; then
	#https://www.freecodecamp.org/news/git-pull-force-how-to-overwrite-local-changes-with-git/
	cd ~/$PROJECT_DIR

	git fetch
	git reset --hard @{u}
	# git merge '@{u}'
	#git pull
	MF_STATUS="UPDATING"
	echo "updated"
else
	git clone -v -b production --single-branch $GITHUB_CLONE_URL
	MF_STATUS="INITING"
	cd ~/$PROJECT_DIR
	echo "cloned"
fi
git submodule update --init --remote

echo "grabbing hex we are now in $(pwd)"
mix local.hex --force

echo "installing elixir dependancies via mix"
mix deps.get
mix deps.compile

# echo "installing bun packages"
# sudo /home/luke/.bun/bin/bun install --verbose --production
# # RAILS_ENV=production NODE_ENV=production ./bin/yarn install --check-files

echo "DEPLOYING ASSETS NEVERMIND PUT THEM IN REPO"
# mix assets.deploy

echo "migrating"
mix ecto.migrate

if [ -z "$ENABLED_SERVICES_ON_INSTALL" ]; then
	echo '$ENABLED_SERVICES_ON_INSTALL is missing.'
	exit 1
fi

if [ "$MF_STATUS" == "INITING" ]; then
	systemctl enable $ENABLED_SERVICES_ON_INSTALL
	echo "INITIALIZED SERVICES: $ENABLED_SERVICES_ON_INSTALL"
fi

echo "INIT COMMANDS DONE, WAITING FOR REFRESH"

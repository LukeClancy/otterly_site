#!/bin/bash

# these commands are utilized by the jinxed command.

#nginx / certbot handle https and in the future probably(?) load balancing and junk.

#<----this command makes things fail fast which is useful in this case.

source ~/.bashrc
source ~/.profile
source ~/shared.sh
source ~/production.sh

sudo apt update && sudo apt install nginx

sudo apt install python3-pip
sudo apt install python3-bs4 #< this uses pip believe it or not

s mv ~/vm_utils/otterly_nginx /etc/nginx/sites-available/otterly
s ln -s /etc/nginx/sites-available/otterly /etc/nginx/sites-enabled/otterly

#https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal
echo 'INSTALLATIONS...'

sudo apt install snapd
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot
sudo snap set certbot trust-plugin-with-root=ok

echo 'CERTBOTTING...'

sudo certbot run --nginx -d otterlyjs.org,www.otterlyjs.org

# echo "CHECK THESE ARE FINE"
# echo "$NAMECHEAP_UNAME | $NAMECHEAP_API_KEY | $THIS_IP | q$CERTBOT_DOMAIN"

#this has not been tested w/ automation
# wildcards are only supported with DNS verification. Why draw the line there? Cause fuck it.
# sudo cp "$HOME/vm_utils/namecheap/namecheap_certbot" /usr/bin
# sudo certbot certonly \
#      --preferred-challenges=dns \
#      --manual \
#      --manual-auth-hook=namecheap_certbot \
#      --agree-tos \
#      -d otterlyjs.org,www.otterlyjs.org

#get https -> http
# sudo certbot run --nginx